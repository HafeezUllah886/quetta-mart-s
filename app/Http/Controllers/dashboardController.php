<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\expenses; use App\Models\products; use App\Models\purchase_details; use App\Models\sale_details; use App\Models\sales; use Carbon\Carbon; use Illuminate\Container\Attributes\DB; use Illuminate\Http\Request; class dashboardController extends Controller { public function index() { $months = array(); for ($i = 0; $i < 12; $i++) { $date = Carbon::now()->subMonths($i); $firstDay = $date->copy()->firstOfMonth()->toDateString(); $lastDay = $date->copy()->lastOfMonth()->toDateString(); $monthName = $date->format("\x4d"); $months[] = array("\146\x69\x72\x73\x74" => $firstDay, "\154\x61\163\164" => $lastDay, "\156\x61\155\x65" => $monthName); } $months = array_reverse($months); $sales = array(); $monthNames = array(); $expenses = array(); $products = products::all(); $profits = array(); $last_sale = 0; $last_expense = 0; $last_profit = 0; foreach ($months as $key => $month) { $first = $month["\x66\151\162\x73\164"]; $last = $month["\154\x61\163\x74"]; $sale = sales::whereBetween("\x64\x61\x74\145", array($first, $last))->count(); $expense = expenses::whereBetween("\x64\141\x74\145", array($first, $last))->sum("\141\x6d\x6f\165\x6e\x74"); $sales[] = $sale; $expenses[] = $expense; $monthNames[] = $month["\156\141\155\x65"]; $profit = 0; foreach ($products as $product) { $purchase_price = avgPurchasePrice($first, $last, $product->id); $sale_price = avgSalePrice($first, $last, $product->id); $sold = sale_details::where("\160\x72\157\x64\165\x63\164\111\104", $product->id)->whereBetween("\x64\x61\164\x65", array($first, $last))->sum("\x71\164\x79"); $ppi = $sale_price - $purchase_price; $ppp = $ppi * $sold; $profit += $ppp; } $profits[] = $profit - $expense; $last_sale = $sale; $last_expense = $expense; $last_profit = $profit; } $topProducts = products::withSum("\163\x61\x6c\x65\104\145\164\x61\x69\154\x73", "\161\164\171")->withSum("\x73\141\154\x65\104\145\x74\141\x69\x6c\x73", "\141\155\157\165\x6e\164")->orderByDesc("\163\141\154\x65\x5f\x64\145\x74\141\151\154\163\137\163\x75\x6d\137\x71\164\x79")->take(5)->get(); $topProductsArray = array(); foreach ($topProducts as $product) { $stock = getStock($product->id); $price = avgSalePrice("\141\x6c\x6c", "\141\154\154", $product->id); $topProductsArray[] = array("\156\141\155\145" => $product->name, "\160\162\151\143\x65" => $price, "\x73\x74\x6f\x63\x6b" => $stock, "\141\155\x6f\165\x6e\x74" => $product->sale_details_sum_amount, "\163\x6f\154\x64" => $product->sale_details_sum_qty); } $topCustomers = accounts::where("\x74\171\160\x65", "\x43\165\163\164\157\x6d\x65\162")->withSum("\163\141\154\145", "\x74\x6f\164\x61\x6c")->orderByDesc("\163\141\x6c\x65\x5f\x73\165\x6d\137\164\157\164\141\154")->take(5)->get(); $topCustomersArray = array(); foreach ($topCustomers as $customer) { if ($customer->id != 2) { $balance = getAccountBalance($customer->id); $customer_purchases = $customer->sale_sum_total; $topCustomersArray[] = array("\x6e\x61\155\145" => $customer->title, "\160\165\162\x63\x68\141\x73\x65\x73" => $customer_purchases, "\x62\141\154\141\156\143\x65" => $balance); } } return view("\x64\141\163\x68\x62\x6f\x61\162\x64\x2e\x69\156\144\x65\x78", compact("\163\x61\154\145\x73", "\155\x6f\156\164\x68\x4e\141\x6d\x65\163", "\145\x78\x70\145\156\163\145\163", "\160\162\x6f\x66\x69\164\x73", "\154\141\x73\x74\137\163\x61\154\145", "\x6c\x61\163\x74\137\145\x78\160\145\x6e\163\145", "\x6c\141\163\x74\137\160\162\157\x66\x69\x74", "\x74\157\x70\120\x72\157\144\165\x63\x74\163\x41\x72\x72\x61\171", "\x74\x6f\x70\x43\x75\x73\x74\x6f\x6d\145\x72\163\101\162\x72\141\171")); } }
