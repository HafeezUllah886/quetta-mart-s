<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\expenses; use App\Models\products; use App\Models\purchase_details; use App\Models\sale_details; use App\Models\sales; use Carbon\Carbon; use Illuminate\Container\Attributes\DB; use Illuminate\Http\Request; class dashboardController extends Controller { public function index() { $months = array(); for ($i = 0; $i < 12; $i++) { $date = Carbon::now()->subMonths($i); $firstDay = $date->copy()->firstOfMonth()->toDateString(); $lastDay = $date->copy()->lastOfMonth()->toDateString(); $monthName = $date->format("\115"); $months[] = array("\146\151\162\x73\164" => $firstDay, "\154\141\x73\164" => $lastDay, "\x6e\141\155\145" => $monthName); } $months = array_reverse($months); $sales = array(); $monthNames = array(); $expenses = array(); $products = products::all(); $profits = array(); $last_sale = 0; $last_expense = 0; $last_profit = 0; foreach ($months as $key => $month) { $first = $month["\x66\x69\162\163\164"]; $last = $month["\154\x61\x73\164"]; $sale = sales::whereBetween("\x64\141\164\x65", array($first, $last))->count(); $expense = expenses::whereBetween("\144\141\164\x65", array($first, $last))->sum("\141\x6d\x6f\165\x6e\164"); $sales[] = $sale; $expenses[] = $expense; $monthNames[] = $month["\x6e\141\155\145"]; $profit = 0; foreach ($products as $product) { $purchase_price = avgPurchasePrice($first, $last, $product->id); $sale_price = avgSalePrice($first, $last, $product->id); $sold = sale_details::where("\160\162\x6f\x64\165\143\164\x49\104", $product->id)->whereBetween("\144\x61\x74\145", array($first, $last))->sum("\x71\164\x79"); $ppi = $sale_price - $purchase_price; $ppp = $ppi * $sold; $profit += $ppp; } $profits[] = $profit - $expense; $last_sale = $sale; $last_expense = $expense; $last_profit = $profit; } $topProducts = products::withSum("\x73\141\x6c\145\104\145\164\141\151\x6c\163", "\x71\x74\x79")->withSum("\x73\x61\154\145\104\x65\x74\x61\151\x6c\163", "\141\x6d\x6f\165\156\164")->orderByDesc("\x73\141\x6c\x65\137\144\145\x74\x61\151\154\163\x5f\x73\165\155\x5f\161\164\x79")->take(5)->get(); $topProductsArray = array(); foreach ($topProducts as $product) { $stock = getStock($product->id); $price = avgSalePrice("\x61\x6c\154", "\x61\x6c\x6c", $product->id); $topProductsArray[] = array("\156\141\x6d\x65" => $product->name, "\x70\x72\151\143\145" => $price, "\x73\164\157\x63\x6b" => $stock, "\141\x6d\x6f\x75\x6e\x74" => $product->sale_details_sum_amount, "\163\x6f\154\x64" => $product->sale_details_sum_qty); } $topCustomers = accounts::where("\164\x79\160\x65", "\103\x75\x73\164\157\155\145\162")->withSum("\163\x61\154\x65", "\x74\157\x74\141\154")->orderByDesc("\163\x61\x6c\145\x5f\x73\x75\x6d\137\164\x6f\164\141\154")->take(5)->get(); $topCustomersArray = array(); foreach ($topCustomers as $customer) { if ($customer->id != 2) { $balance = getAccountBalance($customer->id); $customer_purchases = $customer->sale_sum_total; $topCustomersArray[] = array("\x6e\x61\155\x65" => $customer->title, "\x70\x75\162\x63\150\x61\163\145\x73" => $customer_purchases, "\142\x61\x6c\x61\x6e\143\x65" => $balance); } } return view("\144\x61\x73\150\x62\157\141\162\144\x2e\x69\x6e\x64\145\170", compact("\163\x61\154\x65\163", "\155\157\156\x74\x68\x4e\141\155\x65\x73", "\145\x78\x70\145\156\x73\145\163", "\160\162\x6f\x66\x69\164\x73", "\x6c\141\163\164\137\163\x61\154\x65", "\x6c\141\163\x74\137\145\x78\160\145\x6e\x73\145", "\x6c\x61\x73\x74\x5f\160\162\157\x66\x69\164", "\164\x6f\x70\120\x72\x6f\144\x75\x63\x74\163\x41\x72\162\x61\171", "\164\x6f\x70\x43\165\163\164\x6f\155\145\x72\x73\x41\162\x72\x61\x79")); } }
