<?php
 namespace App\Http\Controllers; use App\Models\products; use App\Models\stock; use App\Models\stockTransfer; use App\Models\stockTransferDetails; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class StockTransferController extends Controller { public function index() { $transfers = stockTransfer::orderBy("\x69\x64", "\144\x65\x73\x63")->get(); return view("\163\x74\157\x63\x6b\56\164\x72\141\x6e\163\x66\145\x72\x2e\x69\156\x64\145\x78", compact("\164\x72\141\x6e\x73\x66\145\162\x73")); } public function create() { $products = products::orderby("\156\x61\155\145", "\141\x73\143")->get(); $warehouses = warehouses::all(); return view("\163\164\157\143\153\56\164\x72\141\156\163\146\145\x72\56\x63\x72\x65\141\164\145", compact("\x70\162\157\144\x75\x63\164\163", "\x77\x61\162\145\150\x6f\x75\163\145\x73")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\120\x6c\x65\x61\163\145\40\x53\x65\154\145\x63\164\40\x41\x74\x6c\145\x61\163\164\40\117\156\145\40\x50\162\x6f\x64\x75\143\164"); } DB::beginTransaction(); $ref = getRef(); $transfer = stockTransfer::create(array("\x66\x72\157\x6d\111\104" => $request->fromID, "\x74\x6f\x49\104" => $request->toID, "\144\x61\164\145" => $request->date, "\x6e\157\164\x65\163" => $request->notes, "\x75\163\x65\x72\111\x44" => auth()->user()->id, "\162\145\x66\111\x44" => $ref)); $ids = $request->id; foreach ($ids as $key => $id) { $qty = $request->qty[$key]; stockTransferDetails::create(array("\164\162\141\156\163\x66\x65\162\111\x44" => $transfer->id, "\160\162\x6f\144\165\x63\x74\x49\x44" => $id, "\x71\164\171" => $qty, "\162\145\x66\x49\x44" => $ref)); $warehouseFrom = warehouses::find($request->fromID); $warehouseTo = warehouses::find($request->toID); createStock($id, 0, $qty, $request->date, "\x54\x72\141\x6e\x73\146\x65\x72\x65\x64\40\164\157\40{$warehouseTo->name}", $ref, $request->fromID); createStock($id, $qty, 0, $request->date, "\x54\x72\141\x6e\x73\x66\145\162\145\144\40\146\162\157\x6d\x20{$warehouseFrom->name}", $ref, $request->toID); } DB::commit(); return to_route("\163\x74\x6f\x63\x6b\x54\x72\x61\x6e\x73\146\x65\x72\x2e\151\x6e\x64\x65\x78")->with("\x73\165\x63\x63\145\x73\x73", "\123\x74\157\143\153\40\124\162\141\156\163\x66\x65\162\x20\x43\162\145\x61\x74\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\162\x72\x6f\x72", $e->getMessage()); } } public function show($id) { $transfer = stockTransfer::find($id); return view("\x73\164\x6f\143\x6b\x2e\164\x72\141\x6e\x73\146\x65\x72\56\x76\151\x65\x77", compact("\x74\162\141\156\x73\146\x65\x72")); } public function edit(stockTransfer $stockTransfer) { } public function update(Request $request, stockTransfer $stockTransfer) { } public function destroy($id) { try { DB::beginTransaction(); $transfer = stockTransfer::find($id); foreach ($transfer->details as $product) { stock::where("\x72\145\x66\x49\x44", $product->refID)->delete(); $product->delete(); } $transfer->delete(); DB::commit(); session()->forget("\143\157\x6e\x66\x69\162\155\145\x64\137\x70\x61\163\x73\x77\157\x72\x64"); return to_route("\x73\164\157\x63\153\x54\162\x61\x6e\x73\146\145\x72\x2e\x69\156\x64\145\170")->with("\163\x75\x63\x63\145\x73\163", "\x53\x74\157\x63\153\x20\124\x72\x61\156\163\146\145\162\40\x44\x65\154\145\164\x65\x64"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\157\x6e\146\151\x72\x6d\x65\x64\137\160\141\163\163\167\157\162\x64"); return to_route("\x73\x74\x6f\143\x6b\x54\x72\x61\x6e\163\x66\x65\x72\56\151\x6e\144\x65\x78")->with("\145\162\x72\157\162", $e->getMessage()); } } }
